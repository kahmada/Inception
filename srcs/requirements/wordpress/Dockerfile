# Cette ligne signifie que ton image part dâ€™une base officielle Debian Bullseye (version stable de Debian). Câ€™est ton systÃ¨me de base sur lequel tu vas tout installer (PHP, WordPress, etc.).
FROM debian:bullseye

# Install required dependencies and add the PHP repository
#Installe les paquets nÃ©cessaires :

#php : le langage PHP (essentiel pour WordPress),

#php-fpm : PHP en mode "FastCGI Process Manager", utilisÃ© pour exÃ©cuter PHP de maniÃ¨re performante,

#php-mysql : extension PHP pour se connecter Ã  MariaDB/MySQL,

#curl : utilitaire pour tÃ©lÃ©charger des fichiers depuis internet (utilisÃ© souvent dans les scripts).

RUN apt update -y && apt install -y php php-fpm php-mysql curl
# Copie de la configuration WordPress personnalisÃ©e dans le dossier /tmp/ du conteneur.
COPY ./tools/wp-setup.sh /tmp/

#Rend le script exÃ©cutable avec les droits UNIX
RUN chmod +x /tmp/wp-setup.sh

#ğŸ‘‰ CrÃ©e un dossier oÃ¹ PHP-FPM stockera ses fichiers runtime (comme les sockets).
#Cette ligne est importante pour Ã©viter des erreurs au dÃ©marrage de PHP-FPM.
RUN mkdir -p /run/php



#ğŸ‘‰ Cette ligne indique que le script /tmp/wp-setup.sh sera exÃ©cutÃ© au lancement du conteneur, avant toute autre commande.
ENTRYPOINT ["./tmp/wp-setup.sh"]

# Lancement de PHP-FPM en mode foreground
CMD ["php-fpm7.4", "-F"]
#ğŸ”¹ -F
#Câ€™est une option importante : elle signifie "ne pas se dÃ©tacher en arriÃ¨re-plan" (foreground mode).

#Pourquoi câ€™est important dans Docker ? Parce que :

#Docker attend que le processus principal reste actif ;

#Si ton processus principal (ici PHP-FPM) se termine, Docker arrÃªte le conteneur ;

#Lâ€™option -F dit Ã  PHP-FPM de rester actif dans le terminal, ce qui permet Ã  Docker de continuer Ã  faire tourner le conteneur.