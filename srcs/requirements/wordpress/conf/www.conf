[www]#Dans Docker, ce pool va g√©rer toutes les requ√™tes PHP venant de Nginx, dans le conteneur wordpress.
user = www-data# Cela signifie que les processus PHP s'ex√©cutent en tant qu'utilisateur www-data, ce qui est standard et s√©curis√© pour les serveurs web.
group = www-data
listen = 9000
#üëâ Tr√®s important dans Inception : PHP-FPM √©coute sur le port 9000 dans le conteneur wordpress.

#Le conteneur Nginx (dans nginx) doit envoyer les requ√™tes PHP vers wordpress:9000, gr√¢ce au r√©seau Docker inception_network.
pm = dynamic#PHP-FPM g√®re dynamiquement les processus selon la charge. C‚Äôest adapt√© √† Docker, car √ßa √©vite d‚Äôutiliser trop de RAM inutilement.
pm.max_children = 5#Le nombre maximum de processus PHP pouvant √™tre lanc√©s.
#Si tu as peu de RAM dans ta VM ou ton h√¥te Docker, c‚Äôest bien de limiter.


pm.start_servers = 2#Lance 2 processus PHP au d√©marrage.
pm.min_spare_servers = 1#Garde entre 1 et 3 processus "en attente" pour r√©pondre rapidement.
pm.max_spare_servers = 3
#Dans le projet Inception, tu construis un service WordPress qui utilise :

#Nginx pour servir le site.

#PHP-FPM pour ex√©cuter le code PHP.

#MariaDB pour stocker les donn√©es du site.

#Ton conteneur wordpress contient un serveur PHP-FPM configur√© pour communiquer avec Nginx. Ce serveur utilise un fichier comme www.conf pour d√©terminer comment il fonctionne en interne.



#| √âl√©ment             | R√¥le dans Inception                                          |
#| ------------------- | ------------------------------------------------------------ |
#| `listen = 9000`     | Permet √† Nginx (dans un autre conteneur) de parler √† PHP-FPM |
#| `user = www-data`   | Assure que PHP a les bons droits sur les fichiers WordPress  |
#| `pm = dynamic`      | Adapte automatiquement la charge du conteneur `wordpress`    |
#| `max_children` etc. | √âvite de surcharger la machine h√¥te avec trop de processus   |
