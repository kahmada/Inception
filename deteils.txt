🧱 1. Docker et Docker Compose
🐳 Docker
Docker permet d’exécuter une application dans un conteneur (un environnement isolé, léger, reproductible).
Chaque conteneur embarque ce dont il a besoin : système, bibliothèques, configuration.

📦 Dockerfile
Un fichier texte qui décrit comment construire une image Docker.
Exemple :

Dockerfile
Copy
Edit
FROM debian
RUN apt update && apt install -y nginx
🧩 Docker Compose
Un outil qui permet de définir et démarrer plusieurs conteneurs en une seule commande via un fichier docker-compose.yml.

🗃️ 2. Volumes Docker
Un volume est un espace de stockage persistant, indépendant du cycle de vie du conteneur.
Exemple : si tu redémarres le conteneur MariaDB, la base de données reste car elle est stockée dans un volume Docker.

🔒 3. Sécurité – SSL/TLS et certificats
🔐 SSL/TLS
Ce sont des protocoles de cryptage utilisés pour sécuriser les communications sur Internet.
HTTPS = HTTP + TLS

🔏 Certificat auto-signé
Tu as probablement utilisé openssl pour générer un certificat qui :

chiffrera les données entre navigateur ↔ serveur

prouvera l'identité du serveur (dans les vrais sites, ce certificat est validé par une autorité de certification)

📡 4. Nginx – Reverse Proxy et HTTPS
📘 Nginx
Un serveur web léger et performant, utilisé pour :

Servir des fichiers statiques (HTML, images…)

Agir comme reverse proxy

🔁 Reverse Proxy
Un reverse proxy reçoit les requêtes d’un client, et les redirige vers un autre serveur (ici, WordPress via PHP-FPM).
Tu as configuré Nginx pour écouter sur le port 443 (HTTPS), et transmettre les requêtes au service PHP-FPM.

🐘 5. MariaDB – Base de données
📂 MariaDB
Un système de gestion de base de données relationnelle (SGBDR). C’est un fork de MySQL, utilisé pour stocker :

les utilisateurs WordPress

les articles

les paramètres, etc.

Tu l’as initialisée avec :

une base (wordpress)

un utilisateur WordPress

un mot de passe

Tu as peut-être fait ça avec un script SQL (init.sql) exécuté automatiquement au premier démarrage.

🌐 6. WordPress + PHP-FPM
📝 WordPress
Un CMS (Content Management System) : il permet de créer un site sans coder.

WordPress utilise :

PHP côté serveur

MySQL/MariaDB pour stocker les données

⚙️ PHP-FPM (FastCGI Process Manager)
PHP-FPM est un moteur d'exécution PHP.
Il écoute sur un socket Unix ou un port TCP, et exécute les fichiers PHP quand Nginx le lui demande.

🔁 Nginx ne sait pas exécuter PHP, il transmet donc les fichiers .php à PHP-FPM via FastCGI.

Exemple de config Nginx :

nginx
Copy
Edit
location ~ \.php$ {
    fastcgi_pass wordpress:9000;
    fastcgi_index index.php;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;
}
⚙️ 7. Variables d’environnement
Tu les as probablement définies dans docker-compose.yml :

yaml
Copy
Edit
environment:
  - WORDPRESS_DB_HOST=mariadb
  - WORDPRESS_DB_USER=myuser
  - WORDPRESS_DB_PASSWORD=mypass
WordPress et MariaDB utilisent ces variables pour se connecter entre eux, sans les mettre en dur dans le code.

🛡️ 8. Isolation des services
Chaque service :

tourne dans un conteneur séparé

a son propre réseau privé Docker

ne communique qu’avec les autres si tu le définis dans docker-compose.yml

C’est une architecture en microservices, ce qui améliore :

la sécurité

la maintenance

l'évolutivité

🔁 9. Automatisation
Tu as peut-être utilisé des scripts comme setup.sh ou wp-cli pour :

télécharger WordPress

le configurer automatiquement (site name, user, admin, etc.)

vérifier la connexion avec la base de données

Cela s'appelle l’automatisation de déploiement (Infrastructure as Code).

🎯 Résultat final
Tu as construit une infra complète avec :

Un serveur Nginx avec HTTPS

Un site WordPress fonctionnel

Une base de données persistante

Le tout orchestré automatiquement avec Docker